(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* :Title: Profile *)
(* :Context: Profile` *)
(* :Author: Mark A. Caprio, Department of Physics, University of Notre Dame *)
(* :Summary: Storage and display of execution timing information. *)
(* :Copyright: Copyright 2011, Mark A. Caprio *)
(* :Package Version: 0.0 *)
(* :Mathematica Version: 8.0 *)
(* :History:
Originated 9/22/03 as MCProfiling, incorporating earlier definitions.
  Updated as package Profile 8/27/11.
Rename Profile function back to PrintTiming to prevent conflict with System`Profile under Workbench 6/1/13.
  Last modified 6/1/13.
*)


BeginPackage[
"Profile`"
];


Unprotect[Evaluate[$Context<>"*"]];


PrintTiming::usage="PrintTiming[expr] prints or saves profiling information on the evaluation of expr.";
PrintValue::usage="PrintValue[expr] prints (or saves) the value of expr.";
CellPrintValue::usage="CellPrintValue[expr] prints the value of expr to a cell for archival storage. CellPrintValue[expr1,expr2,...] yields multiple cells.";
GetTiming::usage="GetTiming[label] returns the profiling information {CPU,wall}.";
GetValue::usage="GetValue[label] returns the saved value of expr.";


Begin["`Private`"];





Options[PrintTiming]={Label->None,Print->True,Do->1};
SetAttributes[PrintTiming,HoldFirst];
PrintTiming[Expr_,OptionsPattern[]]:=Module[
{
AbsoluteTime,Time,Value,OptSave,OptDo,OptLabel,
LabelText,TimingText,Dummy
},

(* execution *)
OptDo=OptionValue[Do];
{AbsoluteTime,{Time,Dummy}}=AbsoluteTiming[Timing[Do[Value=Expr,{OptDo}]]];
{AbsoluteTime,Time}=Chop[{AbsoluteTime,Time}];  (* to be revised when execution times fall below 100 ps *)

(* saving *)
OptLabel=OptionValue[Label];
TimingData[OptLabel]={Time,AbsoluteTime};

(* report construction *)
If[
OptionValue[Print],
LabelText=Switch[
OptLabel,
None,"",
_,Row[{Style[OptLabel,FontSlant->"Italic"],Style[": ",FontSlant->"Italic"]}]//DisplayForm
];
TimingText=Row[{Time," (CPU), ",AbsoluteTime," (wall) "}]//DisplayForm;
Print["     ",LabelText,TimingText]
];

(* value return *)
Value
];


GetTiming[l_]:=TimingData[l];


Options[PrintValue]={Label->None,Print->True};
PrintValue[Expr_,OptionsPattern[]]:=Module[
{
Value,OptSave,OptLabel,
LabelText,ValueText
},

Value=Expr;
OptLabel=OptionValue[Label];

(* saving *)
ValueData[OptLabel]=Value;

(* report construction *)
If[
OptionValue[Print],
LabelText=Switch[
OptLabel,
None,"",
_,Row[{Style[OptLabel,FontSlant->"Italic"],Style[": ",FontSlant->"Italic"]}]//DisplayForm
];
ValueText=Value;
Print["     ",LabelText,ValueText]
];

(* value return *)
Value
];


Options[CellPrintValue]={Label->None,Print->True,CellOpen->False,CellStyle->"Text"};
CellPrintValue[ExprSeq___,OptionsPattern[]]:=Module[
{
OptSave,OptLabel,
LabelText,ValueText
},

OptLabel=OptionValue[Label];


(* report construction *)
If[
OptionValue[Print],
LabelText=Switch[
OptLabel,
None,"",
_,OptLabel
];
Print@OpenerView[
{
(* header cell *)
(* Note: wrapper Text changes display from typewriter-style to typeset-style *)
TextCell[Text[LabelText]],
(* data cell *)
(* Note: contents are difficult but not impossible to select *)
TextCell[
Column[{ExprSeq}],
OptionValue[CellStyle]
]
},
OptionValue[CellOpen]
]
];

(* value return -- expr1 *)
First[{ExprSeq}]
];


GetValue[l_]:=ValueData[l];


End[];


Protect[Evaluate[$Context<>"*"]];
Unprotect[Evaluate[$Context<>"$*"]];
EndPackage[];
