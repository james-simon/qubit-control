(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.4' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    327086,       6292]
NotebookOptionsPosition[    325995,       6257]
NotebookOutlinePosition[    326339,       6272]
CellTagsIndexPosition[    326296,       6269]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"$Assumptions", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"_", "\[Element]", "Reals"}], ",", " ", 
      RowBox[{"h", " ", ">", " ", "0"}], ",", " ", 
      RowBox[{"Vt", " ", ">", " ", "0"}], ",", " ", 
      RowBox[{"d", "  ", ">", " ", "0"}], ",", " ", 
      RowBox[{"A", " ", ">", " ", "0"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", "\t"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TProduct", "[", "M__", "]"}], ":=", 
  RowBox[{"KroneckerProduct", "[", "M", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]I", " ", "=", " ", 
   RowBox[{"PauliMatrix", "[", "0", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]X", " ", "=", " ", 
   RowBox[{"PauliMatrix", "[", "1", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]Y", " ", "=", " ", 
   RowBox[{"PauliMatrix", "[", "2", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]Z", " ", "=", " ", 
   RowBox[{"PauliMatrix", "[", "3", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"X", " ", "=", " ", "\[Sigma]X"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Y", " ", "=", " ", "\[Sigma]Y"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Z", " ", "=", " ", "\[Sigma]Z"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]II", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]I", ",", " ", "\[Sigma]I"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]IX", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]I", ",", " ", "\[Sigma]X"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]IY", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]I", ",", " ", "\[Sigma]Y"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]IZ", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]I", ",", " ", "\[Sigma]Z"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]XI", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]X", ",", " ", "\[Sigma]I"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]XX", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]X", ",", " ", "\[Sigma]X"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]XY", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]X", ",", " ", "\[Sigma]Y"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]XZ", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]X", ",", " ", "\[Sigma]Z"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]YI", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]Y", ",", " ", "\[Sigma]I"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]YX", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]Y", ",", " ", "\[Sigma]X"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]YY", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]Y", ",", " ", "\[Sigma]Y"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]YZ", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]Y", ",", " ", "\[Sigma]Z"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]ZI", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]Z", ",", " ", "\[Sigma]I"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]ZX", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]Z", ",", " ", "\[Sigma]X"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]ZY", " ", "=", " ", 
   RowBox[{"TProduct", "[", 
    RowBox[{"\[Sigma]Z", ",", " ", "\[Sigma]Y"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Sigma]ZZ", " ", "=", " ", 
    RowBox[{"TProduct", "[", 
     RowBox[{"\[Sigma]Z", ",", " ", "\[Sigma]Z"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"printAsPauliMatrices", "[", "M_", "]"}], " ", ":=", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[Sigma]s", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
       "\[Sigma]I", ",", " ", "\[Sigma]X", ",", " ", "\[Sigma]Y", ",", " ", 
        "\[Sigma]Z"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"letters", " ", "=", " ", 
      RowBox[{"{", 
       RowBox[{
       "\"\<I\>\"", ",", " ", "\"\<X\>\"", ",", " ", "\"\<Y\>\"", ",", " ", 
        "\"\<Z\>\""}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"output", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "M", "]"}], " ", "\[Equal]", " ", "2"}], ",", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"term", " ", "=", "  ", 
            RowBox[{
             RowBox[{"Total", "[", 
              RowBox[{"Total", "[", 
               RowBox[{
                RowBox[{"Conjugate", "[", 
                 RowBox[{"\[Sigma]s", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "]"}], "*", "M"}], "]"}], 
              "]"}], "/", 
             RowBox[{"Length", "[", "M", "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"PossibleZeroQ", "[", "term", "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"output", " ", "=", " ", 
               RowBox[{"Join", "[", 
                RowBox[{"output", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"ToString", "[", 
                    RowBox[{
                    RowBox[{"term", " ", "//", " ", "FullSimplify"}], ",", 
                    " ", "StandardForm"}], "]"}], ",", " ", 
                   "\"\< \[Sigma]\>\"", ",", " ", 
                   RowBox[{"letters", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "\"\< + \>\""}],
                   "}"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], 
           ";"}], "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "4"}], "}"}]}], "]"}], 
        "\[IndentingNewLine]", ")"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "M", "]"}], " ", "\[Equal]", " ", "4"}], ",", 
       " ", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Do", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"term", " ", "=", "  ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Total", "[", 
                   RowBox[{"Total", "[", 
                    RowBox[{
                    RowBox[{"Conjugate", "[", 
                    RowBox[{"TProduct", "[", 
                    RowBox[{
                    RowBox[{"\[Sigma]s", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
                    RowBox[{"\[Sigma]s", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "]"}], "*", 
                    "M"}], "]"}], "]"}], "/", 
                  RowBox[{"Length", "[", "M", "]"}]}], " ", "//", " ", 
                 "FullSimplify"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"!", 
                  RowBox[{"PossibleZeroQ", "[", "term", "]"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"output", " ", "=", " ", 
                   RowBox[{"Join", "[", 
                    RowBox[{"output", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"term", ",", " ", "StandardForm"}], "]"}], ",", 
                    " ", "\"\< \[Sigma]\>\"", ",", " ", 
                    RowBox[{"letters", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
                    RowBox[{"letters", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], ",", "  ", 
                    "\"\< + \>\""}], "}"}]}], "]"}]}], ";"}]}], 
                "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
              ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "4"}], "}"}]}], "]"}], ";"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", " ", "4"}], "}"}]}], "]"}], ";"}], 
        "\[IndentingNewLine]", ")"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"output", "[", 
        RowBox[{"[", 
         RowBox[{";;", 
          RowBox[{
           RowBox[{"Length", "[", "output", "]"}], " ", "-", " ", "1"}]}], 
         "]"}], "]"}], "]"}], "]"}], ";"}], "\[IndentingNewLine]", ")"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"printWithBasis", "[", 
    RowBox[{"M_", ",", "states_"}], "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"ML", "=", 
      RowBox[{"Length", "[", "M", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newM", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"i", "\[Equal]", "0"}], "&&", 
            RowBox[{"j", "\[NotEqual]", "0"}]}], ")"}], ",", 
          RowBox[{"states", "[", 
           RowBox[{"[", "j", "]"}], "]"}], ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"j", "\[Equal]", "0"}], "&&", 
             RowBox[{"i", "\[NotEqual]", "0"}]}], ",", 
            RowBox[{"states", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"i", "\[Equal]", "0"}], "&&", 
               RowBox[{"j", "\[Equal]", "0"}]}], ",", "\"\<\>\"", ",", 
              RowBox[{
               RowBox[{"M", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "0", ",", "ML"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "0", ",", "ML"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"MatrixForm", "[", "newM", "]"}], "]"}]}], ")"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"stateString", "[", 
    RowBox[{"state_", ",", " ", "basis_", ",", " ", 
     RowBox[{"cutoff_:", "0"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"output", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"term", " ", "=", " ", 
         RowBox[{"state", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Abs", "[", "term", "]"}], " ", ">", " ", "cutoff"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"output", " ", "=", " ", 
           RowBox[{"Join", "[", 
            RowBox[{"output", ",", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"ToString", "[", "term", "]"}], ",", " ", 
               RowBox[{"basis", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", " ", "\"\< + \>\""}], 
              "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}], 
       "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", 
         RowBox[{"Length", "[", "state", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"StringJoin", "[", 
      RowBox[{"output", "[", 
       RowBox[{"[", 
        RowBox[{";;", 
         RowBox[{
          RowBox[{"Length", "[", "output", "]"}], " ", "-", " ", "1"}]}], 
        "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", ")"}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"basisID", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<|i\[DownArrow]\[DoubleDownArrow]>\>\"", ",", " ", 
     "\"\<|i\[DownArrow]\[DoubleUpArrow]>\>\"", ",", " ", 
     "\"\<|i\[UpArrow]\[DoubleDownArrow]>\>\"", ",", " ", 
     "\"\<|i\[UpArrow]\[DoubleUpArrow]>\>\"", ",", " ", 
     "\"\<|d\[DownArrow]\[DoubleDownArrow]>\>\"", ",", " ", 
     "\"\<|d\[DownArrow]\[DoubleUpArrow]>\>\"", ",", " ", 
     "\"\<|d\[UpArrow]\[DoubleDownArrow]>\>\"", ",", " ", 
     "\"\<|d\[UpArrow]\[DoubleUpArrow]>\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"basisGE", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<|g\[DownArrow]\[DoubleDownArrow]>\>\"", ",", " ", 
      "\"\<|g\[DownArrow]\[DoubleUpArrow]>\>\"", ",", " ", 
      "\"\<|g\[UpArrow]\[DoubleDownArrow]>\>\"", ",", " ", 
      "\"\<|g\[UpArrow]\[DoubleUpArrow]>\>\"", ",", " ", 
      "\"\<|e\[DownArrow]\[DoubleDownArrow]>\>\"", ",", " ", 
      "\"\<|e\[DownArrow]\[DoubleUpArrow]>\>\"", ",", " ", 
      "\"\<|e\[UpArrow]\[DoubleDownArrow]>\>\"", ",", " ", 
      "\"\<|e\[UpArrow]\[DoubleUpArrow]>\>\""}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Sx", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"hBar", "/", "2"}], ")"}], "\[Sigma]X"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Sy", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"hBar", "/", "2"}], ")"}], "\[Sigma]Y"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Sz", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"hBar", "/", "2"}], ")"}], "\[Sigma]Z"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Ix", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"hBar", "/", "2"}], ")"}], "\[Sigma]X"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Iy", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"hBar", "/", "2"}], ")"}], "\[Sigma]Y"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Iz", "=", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"hBar", "/", "2"}], ")"}], "\[Sigma]Z"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SdotI", "=", 
    RowBox[{
     RowBox[{"TProduct", "[", 
      RowBox[{"Sx", ",", "Ix"}], "]"}], "+", 
     RowBox[{"TProduct", "[", 
      RowBox[{"Sy", ",", "Iy"}], "]"}], "+", 
     RowBox[{"TProduct", "[", 
      RowBox[{"Sz", ",", "Iz"}], "]"}]}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hBar", "=", "1"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"transform", "[", 
    RowBox[{"M_", ",", "U_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"U", ".", "M", ".", 
     RowBox[{"ConjugateTranspose", "[", "U", "]"}]}], "-", 
    RowBox[{"\[ImaginaryI]", "*", "hBar", "*", 
     RowBox[{"U", ".", 
      RowBox[{"ConjugateTranspose", "[", 
       RowBox[{"D", "[", 
        RowBox[{"U", ",", " ", "t"}], "]"}], "]"}]}]}]}]}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"SI", " ", "units"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"setVariables", "[", "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"B0", "=", ".2"}], ";", " ", 
     RowBox[{"(*", " ", "T", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"d", "=", 
      RowBox[{"15", "*", 
       RowBox[{"10", "^", 
        RowBox[{"-", "9"}]}]}]}], ";", " ", 
     RowBox[{"(*", " ", "m", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Bac", "=", ".0006"}], ";", " ", 
     RowBox[{"(*", " ", "T", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Eac", " ", "=", " ", "0"}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"V", "/", "m"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"A", "=", 
      RowBox[{"117", "*", 
       RowBox[{"10", "^", "6"}]}]}], ";", " ", 
     RowBox[{"(*", " ", "Hz", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\[Gamma]e", "=", 
      RowBox[{"27.97", "*", 
       RowBox[{"10", "^", "9"}]}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"Hz", "/", "T"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\[Gamma]n", "=", 
      RowBox[{"17.23", "*", 
       RowBox[{"10", "^", "6"}]}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"Hz", "/", "T"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\[CapitalDelta]\[Gamma]", "=", 
      RowBox[{"-", ".002"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"h", "=", 
      RowBox[{"6.62607004", "*", 
       RowBox[{"10", "^", 
        RowBox[{"-", "34"}]}]}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{"J", "*", "s"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"e", "=", 
      RowBox[{
       RowBox[{"-", "1.60217662"}], "*", 
       RowBox[{"10", "^", 
        RowBox[{"-", "19"}]}]}]}], ";", " ", 
     RowBox[{"(*", " ", "C", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Vt", " ", "=", " ", 
      RowBox[{
       RowBox[{"\[Gamma]e", "*", "B0"}], " ", "+", " ", 
       RowBox[{"A", "/", "4"}]}]}], ";", " ", 
     RowBox[{"(*", " ", "Hz", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\[Nu]B", " ", "=", " ", 
      RowBox[{
       RowBox[{"\[Gamma]e", "*", "B0"}], " ", "+", " ", 
       RowBox[{"A", "/", "4"}]}]}], ";", " ", 
     RowBox[{"(*", " ", "Hz", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\[Nu]E", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"\[Gamma]e", " ", "+", " ", "\[Gamma]n"}], ")"}], "*", 
       "B0"}]}], ";", " ", 
     RowBox[{"(*", " ", "Hz", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"\[Delta]B", " ", "=", " ", 
      RowBox[{
       RowBox[{"\[Gamma]e", "*", "B0"}], " ", "-", " ", "\[Nu]B"}]}], ";"}], 
    "\[IndentingNewLine]", ")"}]}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Epsilon]0", " ", "=", " ", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["Vt", "2"], "+", 
      FractionBox[
       RowBox[{
        SuperscriptBox["d", "2"], " ", 
        SuperscriptBox["e", "2"], " ", 
        SuperscriptBox["\[CapitalDelta]E", "2"]}], 
       SuperscriptBox["h", "2"]]}]]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"clearVariables", "[", "]"}], ":=", 
  RowBox[{"Clear", "[", 
   RowBox[{
   "B0", ",", "Bac", ",", "\[Nu]B", ",", " ", "\[Nu]E", ",", " ", "\[Gamma]e",
     ",", "\[Gamma]n", ",", "\[CapitalDelta]\[Gamma]", ",", "A", ",", "Aac", 
    ",", "\[CapitalDelta]E", ",", "Eac", ",", "Vt", ",", "d", ",", "h", ",", 
    " ", "e", ",", " ", "\[Delta]B", ",", " ", "\[Delta]E", ",", " ", 
    "\[Delta]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.7347087659919667`*^9, 3.734708766233638*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"HorbBase", " ", "=", " ", 
   RowBox[{
    RowBox[{
     FractionBox["Vt", "2"], "\[Sigma]X"}], "-", 
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"e", "*", "\[CapitalDelta]E", "*", "d"}], 
       RowBox[{"2", "h"}]], ")"}], "\[Sigma]Z"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Beta]", ",", " ", "\[Alpha]"}], "}"}], " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Eigensystem", "[", "HorbBase", "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}], " ", "//", " ", "Normalize"}], " ", "//",
     " ", "FullSimplify"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Alpha]", " ", "=", " ", 
    RowBox[{"-", "\[Alpha]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"iState", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", " ", "\[Beta]"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dState", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\[Beta]", ",", " ", 
     RowBox[{"-", "\[Alpha]"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ii", " ", "=", " ", 
   RowBox[{
    RowBox[{"Outer", "[", 
     RowBox[{"Times", ",", " ", "iState", ",", " ", "iState"}], "]"}], " ", "//",
     " ", "FullSimplify"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"id", " ", "=", " ", 
   RowBox[{
    RowBox[{"Outer", "[", 
     RowBox[{"Times", ",", " ", "iState", ",", " ", "dState"}], "]"}], " ", "//",
     " ", "FullSimplify"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"di", " ", "=", " ", 
   RowBox[{
    RowBox[{"Outer", "[", 
     RowBox[{"Times", ",", " ", "dState", ",", " ", "iState"}], "]"}], " ", "//",
     " ", "FullSimplify"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dd", " ", "=", " ", 
    RowBox[{
     RowBox[{"Outer", "[", 
      RowBox[{"Times", ",", " ", "dState", ",", " ", "dState"}], "]"}], " ", "//",
      " ", "FullSimplify"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HB0", "=", 
   RowBox[{
    RowBox[{"-", "B0"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[Gamma]e", "*", 
       RowBox[{"TProduct", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\[Sigma]I", "+", 
           RowBox[{"\[CapitalDelta]\[Gamma]", "*", "dd"}]}], ")"}], ",", "Sz",
          ",", " ", "\[Sigma]I"}], "]"}]}], "-", 
      RowBox[{"\[Gamma]n", "*", 
       RowBox[{"TProduct", "[", 
        RowBox[{"\[Sigma]I", ",", "\[Sigma]I", ",", " ", "Iz"}], "]"}]}]}], 
     ")"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"HA", "=", 
   RowBox[{"TProduct", "[", 
    RowBox[{
     RowBox[{"A", "*", "dd"}], ",", "SdotI"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Horb", "=", 
   RowBox[{"TProduct", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        RowBox[{"(", 
         FractionBox[
          RowBox[{"e", "*", 
           RowBox[{"(", 
            RowBox[{"\[CapitalDelta]E", " ", "+", " ", 
             RowBox[{"Eac", "*", 
              RowBox[{"Cos", "[", 
               RowBox[{"2", "*", "\[Pi]", "*", "\[Nu]E", "*", "t"}], 
               "]"}]}]}], ")"}], "*", "d"}], 
          RowBox[{"2", "h"}]], ")"}]}], "*", 
       RowBox[{"(", 
        RowBox[{"ii", " ", "-", " ", "dd"}], ")"}]}], " ", "+", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Vt", "/", "2"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"id", " ", "+", " ", "di"}], ")"}]}]}], ",", " ", "\[Sigma]I",
      ",", " ", "\[Sigma]I"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"HESR", " ", "=", " ", 
    RowBox[{"Bac", "*", 
     RowBox[{"Sin", "[", 
      RowBox[{"2", "*", "\[Pi]", "*", "\[Nu]B", "*", "t"}], "]"}], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[Gamma]e", "*", 
        RowBox[{"TProduct", "[", 
         RowBox[{"\[Sigma]I", ",", "Sx", ",", " ", "\[Sigma]I"}], "]"}]}], 
       "-", 
       RowBox[{"\[Gamma]n", "*", 
        RowBox[{"TProduct", "[", 
         RowBox[{"\[Sigma]I", ",", "\[Sigma]I", ",", " ", "Ix"}], "]"}]}]}], 
      ")"}]}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HnsInGE", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "\[Delta]B"}], "*", 
      RowBox[{"TProduct", "[", 
       RowBox[{"\[Sigma]I", ",", " ", "Sz", ",", " ", "\[Sigma]I"}], "]"}]}], 
     " ", "+", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Gamma]n", "*", "B0"}], " ", "+", " ", "\[Nu]B"}], ")"}], 
      "*", 
      RowBox[{"TProduct", "[", 
       RowBox[{"\[Sigma]I", ",", " ", "\[Sigma]I", ",", " ", "Iz"}], "]"}]}], 
     " ", "+", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Bac", "/", "2"}], ")"}], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Gamma]e", "*", 
         RowBox[{"TProduct", "[", 
          RowBox[{"\[Sigma]I", ",", " ", "Sx", ",", " ", "\[Sigma]I"}], 
          "]"}]}], " ", "-", " ", 
        RowBox[{"\[Gamma]n", "*", 
         RowBox[{"TProduct", "[", 
          RowBox[{"\[Sigma]I", ",", " ", "\[Sigma]I", ",", " ", "Ix"}], 
          "]"}]}]}], ")"}]}], " ", "+", " ", "Horb", " ", "+", " ", "HA"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"H", " ", "=", " ", 
    RowBox[{
    "HB0", " ", "+", " ", "HESR", " ", "+", " ", "HA", " ", "+", " ", 
     "Horb"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"energiesAt", "[", 
   RowBox[{"Ef_", ",", " ", "M_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"Eigensystem", "[", 
    RowBox[{"M", " ", "/.", " ", 
     RowBox[{"{", 
      RowBox[{"\[CapitalDelta]E", " ", "\[Rule]", " ", "Ef"}], "}"}]}], "]"}],
    "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"energiesInOrder", "[", 
   RowBox[{"Ef_", ",", " ", "M_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"energiesAt", "[", 
    RowBox[{"Ef", ",", " ", "M"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"order", "[", 
     RowBox[{"Ef", ",", " ", "M"}], "]"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"statesAt", "[", 
   RowBox[{"Ef_", ",", " ", "M_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"Eigensystem", "[", 
    RowBox[{"M", " ", "/.", " ", 
     RowBox[{"{", 
      RowBox[{"\[CapitalDelta]E", " ", "\[Rule]", " ", "Ef"}], "}"}]}], "]"}],
    "[", 
   RowBox[{"[", "2", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"statesInOrder", "[", 
    RowBox[{"Ef_", ",", " ", "M_"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"statesAt", "[", 
     RowBox[{"Ef", ",", " ", "M"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"order", "[", 
      RowBox[{"Ef", ",", " ", "M"}], "]"}], "]"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"targetStates", " ", "=", " ", 
   RowBox[{"IdentityMatrix", "[", "8", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"order", "[", 
   RowBox[{"Ef_", ",", " ", "M_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ordering", "[", 
      RowBox[{"row", ",", " ", 
       RowBox[{"-", "1"}]}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"row", ",", 
      RowBox[{"Abs", "[", 
       RowBox[{"targetStates", ".", 
        RowBox[{"ConjugateTranspose", "[", 
         RowBox[{"statesAt", "[", 
          RowBox[{"Ef", ",", " ", "M"}], "]"}], "]"}]}], "]"}]}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"putInOrder", "[", 
   RowBox[{"Q_", ",", " ", "Ef_", ",", " ", "M_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Q", "[", 
   RowBox[{"[", 
    RowBox[{"order", "[", 
     RowBox[{"Ef", ",", " ", "M"}], "]"}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.734706028129546*^9, 3.7347060665706186`*^9}, {
  3.734706138657626*^9, 3.7347061389358225`*^9}, {3.7347083149241266`*^9, 
  3.734708342726313*^9}}],

Cell[BoxData[
 StyleBox[
  RowBox[{"(*", " ", 
   RowBox[{
   "PLOT", " ", "EVOLUTION", " ", "UNDER", " ", "DRIVING", " ", "FIELDS"}], 
   " ", "*)"}], "Subchapter"]], "Input",
 CellChangeTimes->{{3.7347062012141867`*^9, 3.734706215094634*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Tmax", " ", "=", " ", 
    RowBox[{"100", "*", 
     SuperscriptBox["10", 
      RowBox[{"-", "9"}]]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "findEvolution", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"findEvolution", "[", 
    RowBox[{
     RowBox[{"\[CapitalDelta]Ein_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"B0in_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"Eacin_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"Bacin_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"\[Delta]Ein_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"\[Delta]Bin_", "?", "NumericQ"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"setVariables", "[", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Clear", "[", 
      RowBox[{
      "Eff", ",", " ", "EeSpin", ",", " ", "EnSpin", ",", " ", 
       "undrivenStates", ",", " ", "\[Psi]0", ",", " ", "funcs", ",", " ", 
       "equations", ",", " ", "state"}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"\[CapitalDelta]E", " ", "=", " ", "\[CapitalDelta]Ein"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"B0", " ", "=", " ", "B0in"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Bac", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Eac", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Eff", " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"energiesInOrder", "[", 
          RowBox[{"0", ",", " ", "H"}], "]"}], "[", 
         RowBox[{"[", "3", "]"}], "]"}], " ", "-", " ", 
        RowBox[{
         RowBox[{"energiesInOrder", "[", 
          RowBox[{"0", ",", " ", "H"}], "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"EeSpin", " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"energiesInOrder", "[", 
          RowBox[{"0", ",", " ", "H"}], "]"}], "[", 
         RowBox[{"[", "3", "]"}], "]"}], " ", "-", " ", 
        RowBox[{
         RowBox[{"energiesInOrder", "[", 
          RowBox[{"0", ",", " ", "H"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"undrivenStates", " ", "=", " ", 
      RowBox[{"statesInOrder", "[", 
       RowBox[{"0", ",", " ", "H"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Bac", " ", "=", " ", "Bacin"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Eac", " ", "=", " ", "Eacin"}], ";", "\[IndentingNewLine]", 
     RowBox[{"\[Nu]B", " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{"EeSpin", " ", "-", " ", "\[Delta]Bin"}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Nu]E", " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{"Eff", " ", "-", " ", "\[Delta]Ein"}], ")"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"M", " ", "=", " ", 
      RowBox[{"2", "*", "\[Pi]", "*", "H"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Psi]0", " ", "=", " ", 
      RowBox[{"undrivenStates", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"funcs", "=", 
      RowBox[{"Array", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"\[Psi]", "[", "#1", "]"}], "[", "t", "]"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{"Length", "[", "\[Psi]0", "]"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"equations", "=", 
      RowBox[{"Flatten", "@", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"M", ".", "funcs"}], " ", "\[Equal]", " ", 
           RowBox[{"\[ImaginaryI]", "*", 
            RowBox[{"D", "[", 
             RowBox[{"funcs", ",", "t"}], "]"}]}]}], "]"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"funcs", "\[Equal]", "\[Psi]0"}], "/.", 
           RowBox[{"t", "\[Rule]", "0"}]}], "]"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"state", "=", " ", 
      RowBox[{"NDSolveValue", "[", 
       RowBox[{"equations", ",", "funcs", ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", 
          RowBox[{
           RowBox[{"-", "Tmax"}], "/", "100"}], ",", 
          RowBox[{"101", "*", 
           RowBox[{"Tmax", "/", "100"}]}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"clearVariables", "[", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Clear", "[", 
      RowBox[{
      "Eff", ",", " ", "EeSpin", ",", " ", "EnSpin", ",", " ", 
       "undrivenStates", ",", " ", "\[Psi]0", ",", " ", "funcs", ",", " ", 
       "equations"}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "state"}], "\[IndentingNewLine]", ")"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"averageBits", " ", "=", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Tmax", "/", "1000"}], ")"}], "*", 
     RowBox[{"RandomReal", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "5"}], ",", " ", "5"}], "}"}], ",", " ", "100"}], 
      "]"}]}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bestSoFar", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bestT", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bestParameters", " ", "=", " ", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Clear", "[", "maxGDUcoefficient", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"maxGDUcoefficient", "[", 
    RowBox[{
     RowBox[{"\[CapitalDelta]Ein_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"B0in_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"Eacin_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"Bacin_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"\[Delta]E_", "?", "NumericQ"}], ",", " ", 
     RowBox[{"\[Delta]B_", "?", "NumericQ"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"state", " ", "=", " ", 
      RowBox[{"findEvolution", "[", 
       RowBox[{
       "\[CapitalDelta]Ein", ",", " ", "B0in", ",", " ", "Eacin", ",", " ", 
        "Bacin", ",", " ", "\[Delta]E", ",", " ", "\[Delta]B"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"state", " ", "=", " ", 
      SuperscriptBox[
       RowBox[{"Abs", "[", "state", "]"}], "2"]}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"ts", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{"t", ",", " ", 
        RowBox[{"{", 
         RowBox[{"t", ",", " ", "0", ",", " ", "Tmax", ",", " ", 
          RowBox[{"Tmax", "/", "1000"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"otherSum", " ", "=", " ", 
      RowBox[{
       RowBox[{"state", "[", 
        RowBox[{"[", "1", "]"}], "]"}], " ", "+", " ", 
       RowBox[{"state", "[", 
        RowBox[{"[", "3", "]"}], "]"}], " ", "+", " ", 
       RowBox[{"state", "[", 
        RowBox[{"[", "4", "]"}], "]"}], " ", "+", " ", 
       RowBox[{"state", "[", 
        RowBox[{"[", "5", "]"}], "]"}], " ", "+", " ", 
       RowBox[{"state", "[", 
        RowBox[{"[", "6", "]"}], "]"}], " ", "+", " ", 
       RowBox[{"state", "[", 
        RowBox[{"[", "7", "]"}], "]"}], " ", "+", " ", 
       RowBox[{"state", "[", 
        RowBox[{"[", "8", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"samples", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"1", " ", "-", " ", 
         RowBox[{
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", "otherSum", ")"}], " ", "/.", 
             RowBox[{"{", 
              RowBox[{"t", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{"tt", " ", "+", " ", "dt"}], ")"}]}], "}"}]}], ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"dt", ",", " ", "averageBits"}], "}"}]}], "]"}], "/", 
          RowBox[{"Length", "[", "averageBits", "]"}]}]}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"tt", ",", " ", "0", ",", " ", "Tmax", ",", " ", 
          RowBox[{"Tmax", "/", "1000"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"maxSample", " ", "=", " ", 
      RowBox[{"Max", "[", "samples", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"maxSample", " ", ">", " ", "bestSoFar"}], ",", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"bestSoFar", " ", "=", " ", "maxSample"}], ";", " ", 
         RowBox[{"bestParameters", " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{
           "\[CapitalDelta]Ein", ",", " ", "B0in", ",", " ", "Eacin", ",", 
            " ", "Bacin", ",", " ", "\[Delta]E", ",", " ", "\[Delta]B"}], 
           "}"}]}], ";", " ", 
         RowBox[{"bestT", " ", "=", " ", 
          RowBox[{"N", "[", 
           RowBox[{
            RowBox[{"ts", "[", 
             RowBox[{"[", 
              RowBox[{"Ordering", "[", 
               RowBox[{"samples", ",", " ", 
                RowBox[{"-", "1"}]}], "]"}], "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";"}], " ", 
        RowBox[{"(*", 
         RowBox[{"Print", "[", 
          RowBox[{"{", 
           RowBox[{"bestSoFar", ",", " ", "bestParameters"}], "}"}], "]"}], 
         "*)"}], ")"}]}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "maxSample"}], "\[IndentingNewLine]", ")"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bestSoFar", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"bestT", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bestParameters", " ", "=", " ", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Tmax", " ", "=", " ", 
    RowBox[{"Tmax", "*", "2"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"maxGDUcoefficient", "[", 
    RowBox[{"0", ",", " ", 
     RowBox[{".8", "*", ".2", "*", "1.0056"}], ",", " ", "200", ",", " ", 
     ".0007", ",", " ", 
     RowBox[{"2", "*", 
      SuperscriptBox["10", "7"]}], ",", " ", 
     RowBox[{"2", "*", 
      SuperscriptBox["10", "7"]}]}], "]"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"maxGDUcoefficient", "[", 
  RowBox[{
   RowBox[{"-", "68.63253962234526`"}], ",", "0.1654317731042863`", ",", 
   RowBox[{"0", "*", "124.96366462898797`"}], ",", 
   RowBox[{"0", "*", "0.0005183252929544237`"}], ",", 
   RowBox[{"-", "171728.42293817864`"}], ",", 
   RowBox[{"-", "171728.42293817864`"}]}], 
  "]"}], "\[IndentingNewLine]", "bestT", "\[IndentingNewLine]", 
 RowBox[{"state", " ", "/.", " ", 
  RowBox[{"{", 
   RowBox[{"t", "\[Rule]", "bestT"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"LogPlot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Max", "[", 
       RowBox[{
        RowBox[{"state", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
        SuperscriptBox["10", 
         RowBox[{"-", "8"}]]}], "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"i", ",", " ", 
        RowBox[{"Length", "[", "state", "]"}]}], "}"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "Tmax"}], "}"}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", "basisGE"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"LogPlot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Max", "[", 
       RowBox[{
        RowBox[{"state", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
        SuperscriptBox["10", 
         RowBox[{"-", "8"}]]}], "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"i", ",", " ", 
        RowBox[{"Length", "[", "state", "]"}]}], "}"}]}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"bestT", " ", "-", " ", 
      RowBox[{"Tmax", "/", "1000"}]}], ",", " ", 
     RowBox[{"bestT", " ", "+", " ", 
      RowBox[{"Tmax", "/", "1000"}]}]}], "}"}], ",", " ", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", "basisGE"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Tmax", " ", "=", " ", 
    RowBox[{"Tmax", "/", "2"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.734706249751769*^9, 3.7347062575850782`*^9}, 
   3.7347062987595043`*^9, 3.7347063321638317`*^9, {3.734706513260837*^9, 
   3.734706516488052*^9}, {3.7347065473607063`*^9, 3.7347065491850314`*^9}, {
   3.7347066576101456`*^9, 3.7347066582926283`*^9}, {3.7347066951772156`*^9, 
   3.7347067146414595`*^9}, {3.7347067491883774`*^9, 3.734706754359727*^9}, {
   3.7347068302628903`*^9, 3.734706832753053*^9}, {3.7347068653616247`*^9, 
   3.7347069479780865`*^9}, {3.7347208556256037`*^9, 3.734720857626673*^9}, {
   3.7347218288535132`*^9, 3.734721831405421*^9}, {3.7347544592876253`*^9, 
   3.7347544609638076`*^9}, {3.7347546676324587`*^9, 3.7347546683674774`*^9}, 
   3.7347696717048907`*^9, {3.734769711412922*^9, 3.734769721860299*^9}, {
   3.7398065073888283`*^9, 3.7398065102151546`*^9}}],

Cell[BoxData["2.1166677600659156`*^-6"], "Output",
 CellChangeTimes->{
  3.7347062874197783`*^9, 3.734706318709034*^9, 3.7347063502955484`*^9, 
   3.734706393331214*^9, 3.734706423805643*^9, 3.7347065012483625`*^9, 
   3.7347065701743007`*^9, {3.734706681852799*^9, 3.7347066987135673`*^9}, 
   3.7347067368008285`*^9, 3.7347067728469915`*^9, 3.7347068597686768`*^9, 
   3.734706895646742*^9, 3.7347069386138525`*^9, 3.734706976121787*^9, 
   3.734720901343441*^9, 3.7347218750284834`*^9, 3.734754480264496*^9, 
   3.7347546823658676`*^9, 3.734769686265168*^9, 3.734769737736503*^9, 
   3.7356504458243465`*^9, 3.73980556422711*^9, 3.739806542249899*^9}],

Cell[BoxData["0.`"], "Output",
 CellChangeTimes->{
  3.7347062874197783`*^9, 3.734706318709034*^9, 3.7347063502955484`*^9, 
   3.734706393331214*^9, 3.734706423805643*^9, 3.7347065012483625`*^9, 
   3.7347065701743007`*^9, {3.734706681852799*^9, 3.7347066987135673`*^9}, 
   3.7347067368008285`*^9, 3.7347067728469915`*^9, 3.7347068597686768`*^9, 
   3.734706895646742*^9, 3.7347069386138525`*^9, 3.734706976121787*^9, 
   3.734720901343441*^9, 3.7347218750284834`*^9, 3.734754480264496*^9, 
   3.7347546823658676`*^9, 3.734769686265168*^9, 3.734769737736503*^9, 
   3.7356504458243465`*^9, 3.73980556422711*^9, 3.739806542313881*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.9999909669383472`", ",", "2.479512048712471`*^-37", ",", 
   "2.214608384852419`*^-35", ",", "0.`", ",", "9.033061652870493`*^-6", ",", 
   "3.370139173534087`*^-36", ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7347062874197783`*^9, 3.734706318709034*^9, 3.7347063502955484`*^9, 
   3.734706393331214*^9, 3.734706423805643*^9, 3.7347065012483625`*^9, 
   3.7347065701743007`*^9, {3.734706681852799*^9, 3.7347066987135673`*^9}, 
   3.7347067368008285`*^9, 3.7347067728469915`*^9, 3.7347068597686768`*^9, 
   3.734706895646742*^9, 3.7347069386138525`*^9, 3.734706976121787*^9, 
   3.734720901343441*^9, 3.7347218750284834`*^9, 3.734754480264496*^9, 
   3.7347546823658676`*^9, 3.734769686265168*^9, 3.734769737736503*^9, 
   3.7356504458243465`*^9, 3.73980556422711*^9, 3.739806542385863*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJwUVnc8lf8Xl52IZGfvma0S59zhXhnJyN6bzCTu5RpFkWgrSqVUJJXKDoVE
IRKhJCF8U0bDqvS7v7+e13mdc97jfM7neR45vyj7QFYWFpZ+LhaW/z9DGW0O
Xb7fTVLXFxR9ZB9vFLTVaL0z3GOqe0Ob937zZGNayal1GcOjpj4DDfi2drpx
reS4bI3lf6ZfUtXCdzV/aazf23I1dnjeNPbTm8/Tu2YbV/oI2jmbf5nKB6ct
xzybaDRybGy8abliaiBq8GqT3Xjjgf6dNo2H/pr+2q8s97t+pnGwdDgybJgF
Xjv6RyyUTDUu7rtUtbTECu6pNb/9ngw3Cmu4raVt5oDW4Dv3PNo/NxrMiFEF
tLng5vOhqI9D0432dwZyCizXg6tH08TIzpHG6LDz/apBG2Dzg99yXiXDjSc1
HKUqD/HBc+vVuqWTk433ZjYHEi/zw1ibQZ8s+1jjpGPo26BhAYADQqF9Ur2N
vyp3rWp+2QRWLN5JFzpHG9lFVKV/LAlC1d9p3+Sg8UahOC5SLYcQ7A+Dpls/
ehsV3k4GpmwWhhDXjA7ao95GPaPnxyhyIpB9ylHiqtenRtL5m3c3aItCjEBB
2a26wUa7xfTXr03EwHe/LYvL9sZGH6eAXxcsxeHhoSwH0uWBxqgqsriXiwQ8
dxG9XfHhfWOyiIKpYtAW2HO2ufdPS2PjiThW3y8HJEFIWcQj8khT4+W3n9LL
D0mBUuhQ5BO7wcYyo6aSuJPSwJrreVDwzcvG+vOFnSaXZYD7S0sh7WgxBP1G
2iFHWbD8HnJ6w46Oxog72lkBw7JQYFAesHmypzHWXabA3F8OqozT7+e4lQFj
A/899S9yIBFW+Wns9hlIf7z2hG+/PEj1P/ItretozA6bfT2/JA/tPItPtO4U
Np7bMjL+JlkBHlvOTVQ+eQmXOrp+VXEogps6Jh2tKGu8ntjAdTFbETZXhhRo
5Fc3lmrcFU/arAQjlntn1h3qgofvCzR8LipBEctN+gH151B3PNuULKcMyxaV
kob/ShubdzL2KJcow/NqvY70w83wYibMd722CtzTHn3F/XQAei65H/haqQLx
KhUGLH21MGhldaTbRBV2NrkJVB+pgNHfxhcetqjCD4vH6Y3fhmD6jvrtXEs1
IJVEfG3/2wfz7hKPaa/VwNrZvSvlYj0sbeDpcndRh1ufTfOm8/tg7fHKCHxU
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
KAfO2T0ffGfY4v8AiPKIvw==
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQnVlzPPhs4icbsdCtuzdmGx3IXa3flXJHwQ7GN7wm
lJJ8xwDO91I+/Oj1REc4/z+7SNhMKS84X+Xnzb+mNoFwvrJX583HR0Ph/FTD
ljBupig4v7kkLub7jDg430x2w1+r3kSEfaevyZovT4bzfdRzm6a+S4Xz8/1W
bjfgz4Dzv5tVWoqqZsH5uWd3/I/OyIHzWfTnTbvfkgfnu8z/uSMpvQDO38n+
zudXWyGcvy/U1NNgchGcv6tqS7r4tmI437217d2coyVw/qm0CdMvvy6F8xk0
nzxbx1MO5x+70DVPQ6oC4X//zIpgu0o4/+LmWbtk/KsQ/B+ii7uiquH8EyIn
166sqYHzA8TOK6R318L5597xbLu6oQ4RP8unfHxxoR7OT1y83etsXgOcb3vv
wNo6hkY4/2H3Z5f6DgT/vqa3/iXeJjg/YvO+VbXzEPyZ66OjKlSb4fyw6SKz
T29H8G9//Maf59CCCF+bf9eTjiH4wsWKhhvCW+F8U5m8fT73EfxLG67dcSxq
g/NPmqb4dTK1w/kdutJf5DsR/EMC77T4pTvg/KNpr6b6LkbwFddyh9zT6ITz
f9zzWHx8J4I/vXm9GoNjF5wvtUw2prIHwZ93onvip+sIPgC4TY/J
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQnVlzPPhs4icbsdCtuzdmGx3IXa3flXJHwQ7GN7wm
lJJ8xwDO91I+/Oj1REc4/z+7SNhMKS84X+Xnzb+mNoFwvrJX583HR0Ph/FTD
ljBupig4v7kkLub7jDg430x2w1+r3kSEfaevyZovT4bzfdRzm6a+S4Xz8/1W
bjfgz4Dzv5tVWoqqZsH5uWd3/I/OyIHzWfTnTbvfkgfnu8z/uSMpvQDO38n+
zudXWyGcvy/U1NNgchGcv6tqS7r4tmI437217d2coyVw/qm0CdMvvy6F8xk0
nzxbx1MO5x+70DVPQ6oC4X//zIpgu0o4/+LmWbtk/KsQ/B+ii7uiquH8EyIn
166sqYHzA8TOK6R318L5597xbLu6oQ4RP8unfHxxoR7OT1y83etsXgOcb3vv
wNo6hkY4/2H3Z5f6DgT/vqa3/iXeJjg/YvO+VbXzEPyZ66OjKlSb4fyw6SKz
T29H8G9//Maf59CCCF+bf9eTjiH4wsWKhhvCW+F8U5m8fT73EfxLG67dcSxq
g/NPmqb4dTK1w/kdutJf5DsR/EMC77T4pTvg/KNpr6b6LkbwFddyh9zT6ITz
f9zzWHx8J4I/vXm9GoNjF5wvtUw2prIHwZ93onvip+sIPgC4TY/J
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQnVlzPPhs4icbsdCtuzdmGx3IXa3flXJHwQ7GN7wm
lJJ8xwDO91I+/Oj1REc4/z+7SNhMKS84X+Xnzb+mNoFwvrJX583HR0Ph/FTD
ljBupig4v7kkLub7jDg430x2w1+r3kSEfaevyZovT4bzfdRzm6a+S4Xz8/1W
bjfgz4Dzv5tVWoqqZsH5uWd3/I/OyIHzWfTnTbvfkgfnu8z/uSMpvQDO38n+
zudXWyGcvy/U1NNgchGcv6tqS7r4tmI437217d2coyVw/qm0CdMvvy6F8xk0
nzxbx1MO5x+70DVPQ6oC4X//zIpgu0o4/+LmWbtk/KsQ/B+ii7uiquH8EyIn
166sqYHzA8TOK6R318L5597xbLu6oQ4RP8unfHxxoR7OT1y83etsXgOcb3vv
wNo6hkY4/2H3Z5f6DgT/vqa3/iXeJjg/YvO+VbXzEPyZ66OjKlSb4fyw6SKz
T29H8G9//Maf59CCCF+bf9eTjiH4wsWKhhvCW+F8U5m8fT73EfxLG67dcSxq
g/NPmqb4dTK1w/kdutJf5DsR/EMC77T4pTvg/KNpr6b6LkbwFddyh9zT6ITz
f9zzWHx8J4I/vXm9GoNjF5wvtUw2prIHwZ93onvip+sIPgC4TY/J
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.528488, 0.470624, 0.701351], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
SGv+ePStyqBrw01ckBbXuY7+H36WWXA=
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.772079, 0.431554, 0.102387], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQnVlzPPhs4icbsdCtuzdmGx3IXa3flXJHwQ7GN7wm
lJJ8xwDO91I+/Oj1REc4/z+7SNhMKS84X+Xnzb+mNoFwvrJX583HR0Ph/FTD
ljBupig4v7kkLub7jDg430x2w1+r3kSEfaevyZovT4bzfdRzm6a+S4Xz8/1W
bjfgz4Dzv5tVWoqqZsH5uWd3/I/OyIHzWfTnTbvfkgfnu8z/uSMpvQDO38n+
zudXWyGcvy/U1NNgchGcv6tqS7r4tmI437217d2coyVw/qm0CdMvvy6F8xk0
nzxbx1MO5x+70DVPQ6oC4X//zIpgu0o4/+LmWbtk/KsQ/B+ii7uiquH8EyIn
166sqYHzA8TOK6R318L5597xbLu6oQ4RP8unfHxxoR7OT1y83etsXgOcb3vv
wNo6hkY4/2H3Z5f6DgT/vqa3/iXeJjg/YvO+VbXzEPyZ66OjKlSb4fyw6SKz
T29H8G9//Maf59CCCF+bf9eTjiH4wsWKhhvCW+F8U5m8fT73EfxLG67dcSxq
g/NPmqb4dTK1w/kdutJf5DsR/EMC77T4pTvg/KNpr6b6LkbwFddyh9zT6ITz
f9zzWHx8J4I/vXm9GoNjF5wvtUw2prIHwZ93onvip+sIPgC4TY/J
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.363898, 0.618501, 0.782349], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQnVlzPPhs4icbsdCtuzdmGx3IXa3flXJHwQ7GN7wm
lJJ8xwDO91I+/Oj1REc4/z+7SNhMKS84X+Xnzb+mNoFwvrJX583HR0Ph/FTD
ljBupig4v7kkLub7jDg430x2w1+r3kSEfaevyZovT4bzfdRzm6a+S4Xz8/1W
bjfgz4Dzv5tVWoqqZsH5uWd3/I/OyIHzWfTnTbvfkgfnu8z/uSMpvQDO38n+
zudXWyGcvy/U1NNgchGcv6tqS7r4tmI437217d2coyVw/qm0CdMvvy6F8xk0
nzxbx1MO5x+70DVPQ6oC4X//zIpgu0o4/+LmWbtk/KsQ/B+ii7uiquH8EyIn
166sqYHzA8TOK6R318L5597xbLu6oQ4RP8unfHxxoR7OT1y83etsXgOcb3vv
wNo6hkY4/2H3Z5f6DgT/vqa3/iXeJjg/YvO+VbXzEPyZ66OjKlSb4fyw6SKz
T29H8G9//Maf59CCCF+bf9eTjiH4wsWKhhvCW+F8U5m8fT73EfxLG67dcSxq
g/NPmqb4dTK1w/kdutJf5DsR/EMC77T4pTvg/KNpr6b6LkbwFddyh9zT6ITz
f9zzWHx8J4I/vXm9GoNjF5wvtUw2prIHwZ93onvip+sIPgC4TY/J
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[1, 0.75, 0], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQnVlzPPhs4icbsdCtuzdmGx3IXa3flXJHwQ7GN7wm
lJJ8xwDO91I+/Oj1REc4/z+7SNhMKS84X+Xnzb+mNoFwvrJX583HR0Ph/FTD
ljBupig4v7kkLub7jDg430x2w1+r3kSEfaevyZovT4bzfdRzm6a+S4Xz8/1W
bjfgz4Dzv5tVWoqqZsH5uWd3/I/OyIHzWfTnTbvfkgfnu8z/uSMpvQDO38n+
zudXWyGcvy/U1NNgchGcv6tqS7r4tmI437217d2coyVw/qm0CdMvvy6F8xk0
nzxbx1MO5x+70DVPQ6oC4X//zIpgu0o4/+LmWbtk/KsQ/B+ii7uiquH8EyIn
166sqYHzA8TOK6R318L5597xbLu6oQ4RP8unfHxxoR7OT1y83etsXgOcb3vv
wNo6hkY4/2H3Z5f6DgT/vqa3/iXeJjg/YvO+VbXzEPyZ66OjKlSb4fyw6SKz
T29H8G9//Maf59CCCF+bf9eTjiH4wsWKhhvCW+F8U5m8fT73EfxLG67dcSxq
g/NPmqb4dTK1w/kdutJf5DsR/EMC77T4pTvg/KNpr6b6LkbwFddyh9zT6ITz
f9zzWHx8J4I/vXm9GoNjF5wvtUw2prIHwZ93onvip+sIPgC4TY/J
         "]]}}}, {}}, {Ticks -> {Automatic, 
       Charting`ScaledTicks[{Log, Exp}]}, GridLines -> {None, None}, 
     FrameTicks -> {{
        Charting`ScaledTicks[{Log, Exp}], 
        Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}}, 
     AxesOrigin -> {4.081632653061224*^-15, -19.34177299644254}, 
     PlotRange -> {{4.081632653061224*^-15, 
      1.9999999591836733`*^-7}, {-19.34177299644254, 0.9222565583412579}}, 
     DisplayFunction -> Identity, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, DisplayFunction -> 
     Identity, DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None, 
       "ClippingRange" -> {{{4.081632653061224*^-15, 
        1.9999999591836733`*^-7}, {-18.420680743952367`, 
        0.0011643058510852522`}}, {{4.081632653061224*^-15, 
        1.9999999591836733`*^-7}, {-18.420680743952367`, 
        0.0011643058510852522`}}}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Part[#, 1], 
         Exp[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Part[#, 1], 
         Exp[
          Part[#, 2]]}& )}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, 
     PlotRange -> {All, All}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"|g\[DownArrow]\[DoubleDownArrow]>\"", 
       "\"|g\[DownArrow]\[DoubleUpArrow]>\"", 
       "\"|g\[UpArrow]\[DoubleDownArrow]>\"", 
       "\"|g\[UpArrow]\[DoubleUpArrow]>\"", 
       "\"|e\[DownArrow]\[DoubleDownArrow]>\"", 
       "\"|e\[DownArrow]\[DoubleUpArrow]>\"", 
       "\"|e\[UpArrow]\[DoubleDownArrow]>\"", 
       "\"|e\[UpArrow]\[DoubleUpArrow]>\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.528488, 0.470624, 0.701351]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5147193333333333, 0.28770266666666666`, 
                    0.06825800000000001], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.772079, 0.431554, 0.102387]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.772079, 0.431554, 0.102387]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.772079, 0.431554, 0.102387], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.24259866666666668`, 0.412334, 0.521566], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.363898, 0.618501, 0.782349]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.363898, 0.618501, 0.782349]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.363898, 0.618501, 0.782349], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.75, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0.5, 0.],
                     FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0.75, 0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.75, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.75, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
               ",", #8}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.7347062874197783`*^9, 3.734706318709034*^9, 3.7347063502955484`*^9, 
   3.734706393331214*^9, 3.734706423805643*^9, 3.7347065012483625`*^9, 
   3.7347065701743007`*^9, {3.734706681852799*^9, 3.7347066987135673`*^9}, 
   3.7347067368008285`*^9, 3.7347067728469915`*^9, 3.7347068597686768`*^9, 
   3.734706895646742*^9, 3.7347069386138525`*^9, 3.734706976121787*^9, 
   3.734720901343441*^9, 3.7347218750284834`*^9, 3.734754480264496*^9, 
   3.7347546823658676`*^9, 3.734769686265168*^9, 3.734769737736503*^9, 
   3.7356504458243465`*^9, 3.73980556422711*^9, 3.739806545132471*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
uWpDW9oBCh2O3PLxz2wDTePelTtp/5ads/6i+a02gPfXqp2BQj7JjJCKa4MF
TWGGTb0UGiyLSuoNb4MZZPzHf1yan5N6mflBbXDoWV1oFkXz86T9kd/ZNjBY
vUuopJPmZyy4ZOOJNhAPGStKL6X5Wb20StKlDa6t+5kuEUXz41f3sdO+DSRv
rYkWsqX5eXmmO8emDbbESDYyRWh+fsqS3uZtMKlbvt21mIPXTMoFpib0/ueU
Hg5z4ODni0d+i69ug5vjGz/lfWejIorPbNNqAyNSKOPKTTYWmtstPi3XBpuU
tys1NJLoueSAoGN2GwSou+5WCCBRY9qpcrNIGzDOsO8krKT9WbfLzSdTrZDQ
HlX0gs6TGSXu7goTrfC78IbSdvo+nZI81obxWiE8cJHUjgd0fvA5JTrCaAWF
wm1qvTkEttp4dzh0t0Ldlj8RO8oJTFjul1/V1Aod55VNUzgE7hDzD9Cpo8dH
mov/UydRnBVkdQdbYXrjjlkdZ0isxstKM0pbwUX+jdalKhKv3AvjexW1gp1K
56CzMhvNAq+/6XrQCuuHP8j7BLJx0j46zjy9Fc77fRjgd7DxrNRNPcXYVoCh
wG+bo2g+hlP+hYe3glOKutmnblpP6+42jwa1woi91JplSyl88CD9vqNvK7BH
Xm1scKXQLSzb751nK+hx7IO9kylc7PJgq96RVuAo+ZbJ0P2h1/ShXOqBVqh3
Mb0z0UHh7QWFbJHdrXB7jurlWILCfd/+K/W2pPe7eKLgHj2WankR2bOhFWo+
n9NWo3n4UPTK0cKwFUQzTo+60PNFxLxZ8Z9OK7S9VilqpdfbeuLtlJJGK5zm
mn7beIRCIYt3jdeUW2Fwtr1cPr3fCtW6dIFMKzw591jZpoeDgX8+nHGSbIUH
+5Lqi+nzGvR+3lgr3ApVDzYFZ+pzcLy0VXr1rxbw+TG+WKGT5iG5k5E23gI/
o98ucaHr53m2t1iM2wLJJ+utpxeyUXPnYPjZoRZgiDe9LK0kkbWCZdfX2QJW
SkcKkr1IzBTnaFh+bgH/kMDAnqUkOhG8789qWyBlPN5biqR5qBx9rwwtoBug
nj5J+8XW9C93Il62wGRkT1lGJs1D0HfPL09aQNPiz5o5WTQPDr9MnHNb4OrY
9yVLaD8xc+0fybq0Fti2e98iZBNYIy3cr5/UAhalBzZxaF5CR0SL0qNbQGTd
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
H9zUxegGhQMLptMW8lH9/vD3JH43RN+PuqNJ52H/r6kAx99UvxI+sztSeXjP
Smrhwj/doHT90TepnTy0fixb/HV6D4hGNkiuYHNx2oTCvoQ5PeBJv9XVFszF
Urvlv/Yq9MDYbrn/5k7nopq4ru5ntR74uiew/qgk9b4cNGyJ1e2BHgk4Ukzp
kcRC09O7N/fAal3JYaV/LNwtbTlHZhv1/NyKRG4ECyVc7Z43WPXA4xdjts9k
WPj2jdPu6H09sOL+GyWTDOr9lzvO33GoB761rXuOO0hcc9Lr+vQTPRBgxNx6
6x+BNDyrXuPTA7KHe0IdvxCYoBD64VJgD1w7tk3nXzWBlqevuJuG98CT9H+b
y9sJFKu/IfkvugccHNy9h6eRWLIsMasivgd2hkhMr9tNondAmvmFlB7wkYsJ
vp5D4qrmLOaWxz3Q1GT2kjWPhd2r8y+NP+2BiMxQ9arrlD+98HrF21c9ICZw
X7FLmo0W7RXvA8t7gFnfWyeIYeOUVv0R/boe0BGkOR6n9nPxlc9Tv5t7oPja
RfMcSk949XxPK/reA62BA7aTs7iosrHfyK+/B9pexRaQEVzsjOF063B7oNFL
YqnOABdvMkXBwh89oFY98kOwm4c7towp5o/3gEfTctOz6TxUN2d/2ypBAxvm
zA4dBg9nW7cnfJGhQUxuo0LHAj6KHKptT8yngcfCN9PvG/Lxy+HC2WNLaSC8
nGQk2s3H1+7pjTGrafC9S/lntA3FxzOxUcvW0oBD4405mfIxNCjEvFCfBglh
7NpUFT4eueQhZm5Cg0aDnW6VFJ/NYhwrvlnQoPVCe/ClYh6uvrM9xMOWBpJu
3SbfTvJQOm3DpskDNLB+Gnzm9xweCrJWDMW50qD0gpe5Qy4XP+fLvlzhSQOd
tTZHCg25WFTyx+eVHw34x/1RrIqDQQ2dnM7LNCBDlydmVrPRpa0+69QNGjjV
Gc/RMGOjSXfxsb93aGCy9W26dDULVxKPlW+n0WBp0f2XobtYKDkQ37PqCQ1W
x9r7THZQ+mboYnJJPg24K4cTTf1J/DTlvd+yhAaz53cdM6f88Aspl3k0pIF8
5RcXI0qfJMhZtpz+QIPPkox1Dyn9EqC4KVa8lQYrMqatUnxL4EEVVcvEThoU
T0tZINVGoLHmfCk1Bg2a8qfz1CVJXL5RvOYdjwY3b+Tl/7T9/9+7ReHWv2iQ
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

         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ/fU/y/H7Na/3ioVu3b0x2+jA02CDb/s/vYLzry6P
Vl2QgeDnOWl+U7Z9Cef7aq8qalB9AedPf1diFCn8HM6fvWRbyteXT+H8JytW
O2VdeQLnP58vPnnR8sdwfljhWbXwhkdwPtdEs7QnOQ/h/PLFYhKmTg/g/GCO
kNd7wu7B+RPq+HQ5TO7A+Q63tgXfenQTzq+6dPRi7M7rcL76hkMmGYlX4fw1
TsFy2SKX4fzdhV7x8u8vwPnVPPFcW83OwvlT8r6x9N07geDPzjxZonkEzm9P
4TCbKbIfzhdguWHGV7oNzj9ZtG+arfkqOL+zmfnbpeaJcD7TRKsbPtsn2ML4
eupntf+/WQXnHxFQmZGmsA3OV/2xks2oZT+cL9xWsJY37gic///avhXzV52A
81ljDW8ph5yF83+HZK9Tun4Bzp/jpvXS6uclOP9U0G+7M55X4fy8Q6m2a4qu
w/nzfR6FsZ66Cee7Wv2QWPvzNsI9xVUhMXL34Hzz5PbQQxYP4PwFdnJXa/0e
wvn+6naPSqsfwfmTTEXWfFz0GM6f8NXs1JRtT+D8K4celZY8fArnX3a8XVr9
4xmcn/as04iN6wWc7zDjYM1Zo5dw/tXfrtJ73F/B+U9rVT/6PkLwofkFzgcA
qcaqdQ==
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ/fU/y/H7Na/3ioVu3b0x2+jA02CDb/s/vYLzry6P
Vl2QgeDnOWl+U7Z9Cef7aq8qalB9AedPf1diFCn8HM6fvWRbyteXT+H8JytW
O2VdeQLnP58vPnnR8sdwfljhWbXwhkdwPtdEs7QnOQ/h/PLFYhKmTg/g/GCO
kNd7wu7B+RPq+HQ5TO7A+Q63tgXfenQTzq+6dPRi7M7rcL76hkMmGYlX4fw1
TsFy2SKX4fzdhV7x8u8vwPnVPPFcW83OwvlT8r6x9N07geDPzjxZonkEzm9P
4TCbKbIfzhdguWHGV7oNzj9ZtG+arfkqOL+zmfnbpeaJcD7TRKsbPtsn2ML4
eupntf+/WQXnHxFQmZGmsA3OV/2xks2oZT+cL9xWsJY37gic///avhXzV52A
81ljDW8ph5yF83+HZK9Tun4Bzp/jpvXS6uclOP9U0G+7M55X4fy8Q6m2a4qu
w/nzfR6FsZ66Cee7Wv2QWPvzNsI9xVUhMXL34Hzz5PbQQxYP4PwFdnJXa/0e
wvn+6naPSqsfwfmTTEXWfFz0GM6f8NXs1JRtT+D8K4celZY8fArnX3a8XVr9
4xmcn/as04iN6wWc7zDjYM1Zo5dw/tXfrtJ73F/B+U9rVT/6PkLwofkFzgcA
qcaqdQ==
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ/fU/y/H7Na/3ioVu3b0x2+jA02CDb/s/vYLzry6P
Vl2QgeDnOWl+U7Z9Cef7aq8qalB9AedPf1diFCn8HM6fvWRbyteXT+H8JytW
O2VdeQLnP58vPnnR8sdwfljhWbXwhkdwPtdEs7QnOQ/h/PLFYhKmTg/g/GCO
kNd7wu7B+RPq+HQ5TO7A+Q63tgXfenQTzq+6dPRi7M7rcL76hkMmGYlX4fw1
TsFy2SKX4fzdhV7x8u8vwPnVPPFcW83OwvlT8r6x9N07geDPzjxZonkEzm9P
4TCbKbIfzhdguWHGV7oNzj9ZtG+arfkqOL+zmfnbpeaJcD7TRKsbPtsn2ML4
eupntf+/WQXnHxFQmZGmsA3OV/2xks2oZT+cL9xWsJY37gic///avhXzV52A
81ljDW8ph5yF83+HZK9Tun4Bzp/jpvXS6uclOP9U0G+7M55X4fy8Q6m2a4qu
w/nzfR6FsZ66Cee7Wv2QWPvzNsI9xVUhMXL34Hzz5PbQQxYP4PwFdnJXa/0e
wvn+6naPSqsfwfmTTEXWfFz0GM6f8NXs1JRtT+D8K4celZY8fArnX3a8XVr9
4xmcn/as04iN6wWc7zDjYM1Zo5dw/tXfrtJ73F/B+U9rVT/6PkLwofkFzgcA
qcaqdQ==
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.528488, 0.470624, 0.701351], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
HEUwn4uyGTfLz7eC2shN3N9VsiEpobRWsPoJyJ+FHjyc7WqFb+KSyPdajy8G
uhWtEGT1FHFGirBC3qdW8LVe6S90W0+vEYpthewblvj7ud9uFLeAVjAWpSL/
MaJvYdClFYaF7yP/6lp9L9RMW2HUSAP1SrFfZRd/sRUCQi5gfekfraTFrN4K
J+l1yL9span4LblW0FFvRv7bJiP+Vm1uhcUlf+R/k9r3D/4/W+C8yhfku9RU
3G+C1AJXrrGt9BchF25ot7VAimLuir/ne6p8hBZ4N3sc+X43+omP530LGGmv
fD9yjnN00v5lC1S47Ud+Z/dwV3c+boFCtoOIX1xRi9v/XwskrVmDfB/0vuMS
eaMFPj7Ww/FG3r3S+XO2BU7fqsPneXc27Lx6qAV+CQrhfKQW/rCAdAuUvVzE
+TZs3zkkItgC3paHsF+yOWuQ68naAr3Pw3F9fM5+IaTpZugraMf158XlmR8f
aYYXi9UYH8NaqnpKYzNoSmli/BanBDZzFjaDmo8cxjdR6Ph3y5RmiGO9jvHX
PPpfU2N4M9TtKEZ+JiwTk+W8muHROkXkLySs3eOpTTN8sy5EfhWKmQxmrjaD
5HMN5L+HvHvvJa1mSHNuwuv31hpz5So1g0fUFfw9m5WWja5kMzx+KI76Cqrd
1/GdvxkqNMVQfwKSIkrhLM3wVckU9RnjzRmtMNMEQ73MWA9vJ8z+ax9tgsxp
bqyXP6gN37RvaYKvvmnoh6VzmTsz3jeBlwMH1hOa+jHB56ObIH1pI543tGb7
znzzb4IGZx30XwNee70Ql+XxmYjozwSbq4VyZk0w/XcR84VF04mtzbpNMD9H
xv5gZucerzvHmuBRYTPqwd1vM3WNQhPsllvE749YqGxa70WbQLE8G3GAxlT6
6fVNsPf8J9QHf0I/z8S/RhA7/3rlvOpfpeOTL41w6IcO6mP71Y990oONcD7p
CT4/veClal19I3z9sxn7D0XBRwnmBY1wsaYP9XKi/bJFyvNGOLP9MJ5ntshr
NJ3waYQx10T0O/0g2T1Uh0ZY05yO9fXIuGCEz81GSNisid/jm51knpPQaQSD
6KvoJ9+SJq9WHm4Eu6qRle8PWHo+m8g1gtaFasw/TDfKJFi2NEKTymrsb/3h
nd9rrkbIyE/D6zzCzyfV/zSAz4kU/H2U68PzBFoDRMdxrnx/3WOZ/bCnASpL
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
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.772079, 0.431554, 0.102387], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ/fU/y/H7Na/3ioVu3b0x2+jA02CDb/s/vYLzry6P
Vl2QgeDnOWl+U7Z9Cef7aq8qalB9AedPf1diFCn8HM6fvWRbyteXT+H8JytW
O2VdeQLnP58vPnnR8sdwfljhWbXwhkdwPtdEs7QnOQ/h/PLFYhKmTg/g/GCO
kNd7wu7B+RPq+HQ5TO7A+Q63tgXfenQTzq+6dPRi7M7rcL76hkMmGYlX4fw1
TsFy2SKX4fzdhV7x8u8vwPnVPPFcW83OwvlT8r6x9N07geDPzjxZonkEzm9P
4TCbKbIfzhdguWHGV7oNzj9ZtG+arfkqOL+zmfnbpeaJcD7TRKsbPtsn2ML4
eupntf+/WQXnHxFQmZGmsA3OV/2xks2oZT+cL9xWsJY37gic///avhXzV52A
81ljDW8ph5yF83+HZK9Tun4Bzp/jpvXS6uclOP9U0G+7M55X4fy8Q6m2a4qu
w/nzfR6FsZ66Cee7Wv2QWPvzNsI9xVUhMXL34Hzz5PbQQxYP4PwFdnJXa/0e
wvn+6naPSqsfwfmTTEXWfFz0GM6f8NXs1JRtT+D8K4celZY8fArnX3a8XVr9
4xmcn/as04iN6wWc7zDjYM1Zo5dw/tXfrtJ73F/B+U9rVT/6PkLwofkFzgcA
qcaqdQ==
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.363898, 0.618501, 0.782349], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ/fU/y/H7Na/3ioVu3b0x2+jA02CDb/s/vYLzry6P
Vl2QgeDnOWl+U7Z9Cef7aq8qalB9AedPf1diFCn8HM6fvWRbyteXT+H8JytW
O2VdeQLnP58vPnnR8sdwfljhWbXwhkdwPtdEs7QnOQ/h/PLFYhKmTg/g/GCO
kNd7wu7B+RPq+HQ5TO7A+Q63tgXfenQTzq+6dPRi7M7rcL76hkMmGYlX4fw1
TsFy2SKX4fzdhV7x8u8vwPnVPPFcW83OwvlT8r6x9N07geDPzjxZonkEzm9P
4TCbKbIfzhdguWHGV7oNzj9ZtG+arfkqOL+zmfnbpeaJcD7TRKsbPtsn2ML4
eupntf+/WQXnHxFQmZGmsA3OV/2xks2oZT+cL9xWsJY37gic///avhXzV52A
81ljDW8ph5yF83+HZK9Tun4Bzp/jpvXS6uclOP9U0G+7M55X4fy8Q6m2a4qu
w/nzfR6FsZ66Cee7Wv2QWPvzNsI9xVUhMXL34Hzz5PbQQxYP4PwFdnJXa/0e
wvn+6naPSqsfwfmTTEXWfFz0GM6f8NXs1JRtT+D8K4celZY8fArnX3a8XVr9
4xmcn/as04iN6wWc7zDjYM1Zo5dw/tXfrtJ73F/B+U9rVT/6PkLwofkFzgcA
qcaqdQ==
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[1, 0.75, 0], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQ/fU/y/H7Na/3ioVu3b0x2+jA02CDb/s/vYLzry6P
Vl2QgeDnOWl+U7Z9Cef7aq8qalB9AedPf1diFCn8HM6fvWRbyteXT+H8JytW
O2VdeQLnP58vPnnR8sdwfljhWbXwhkdwPtdEs7QnOQ/h/PLFYhKmTg/g/GCO
kNd7wu7B+RPq+HQ5TO7A+Q63tgXfenQTzq+6dPRi7M7rcL76hkMmGYlX4fw1
TsFy2SKX4fzdhV7x8u8vwPnVPPFcW83OwvlT8r6x9N07geDPzjxZonkEzm9P
4TCbKbIfzhdguWHGV7oNzj9ZtG+arfkqOL+zmfnbpeaJcD7TRKsbPtsn2ML4
eupntf+/WQXnHxFQmZGmsA3OV/2xks2oZT+cL9xWsJY37gic///avhXzV52A
81ljDW8ph5yF83+HZK9Tun4Bzp/jpvXS6uclOP9U0G+7M55X4fy8Q6m2a4qu
w/nzfR6FsZ66Cee7Wv2QWPvzNsI9xVUhMXL34Hzz5PbQQxYP4PwFdnJXa/0e
wvn+6naPSqsfwfmTTEXWfFz0GM6f8NXs1JRtT+D8K4celZY8fArnX3a8XVr9
4xmcn/as04iN6wWc7zDjYM1Zo5dw/tXfrtJ73F/B+U9rVT/6PkLwofkFzgcA
qcaqdQ==
         "]]}}}, {}}, {Ticks -> {Automatic, 
       Charting`ScaledTicks[{Log, Exp}]}, GridLines -> {None, None}, 
     FrameTicks -> {{
        Charting`ScaledTicks[{Log, Exp}], 
        Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}}, 
     AxesOrigin -> {-1.999999918367347*^-10, -19.34171433375026}, 
     PlotRange -> {{-1.999999918367347*^-10, 
      1.999999918367347*^-10}, {-19.34171433375026, 0.9210246418033603}}, 
     DisplayFunction -> Identity, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, DisplayFunction -> 
     Identity, DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None, 
       "ClippingRange" -> {{{-1.999999918367347*^-10, 
        1.999999918367347*^-10}, {-18.420680743952367`, \
-8.94799453153428*^-6}}, {{-1.999999918367347*^-10, 
        1.999999918367347*^-10}, {-18.420680743952367`, \
-8.94799453153428*^-6}}}}, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Part[#, 1], 
         Exp[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Part[#, 1], 
         Exp[
          Part[#, 2]]}& )}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None}, 
     PlotRange -> {All, All}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"|g\[DownArrow]\[DoubleDownArrow]>\"", 
       "\"|g\[DownArrow]\[DoubleUpArrow]>\"", 
       "\"|g\[UpArrow]\[DoubleDownArrow]>\"", 
       "\"|g\[UpArrow]\[DoubleUpArrow]>\"", 
       "\"|e\[DownArrow]\[DoubleDownArrow]>\"", 
       "\"|e\[DownArrow]\[DoubleUpArrow]>\"", 
       "\"|e\[UpArrow]\[DoubleDownArrow]>\"", 
       "\"|e\[UpArrow]\[DoubleUpArrow]>\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #6}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #7}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #8}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.528488, 0.470624, 0.701351]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.5147193333333333, 0.28770266666666666`, 
                    0.06825800000000001], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.772079, 0.431554, 0.102387]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.772079, 0.431554, 0.102387]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.772079, 0.431554, 0.102387], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.24259866666666668`, 0.412334, 0.521566], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.363898, 0.618501, 0.782349]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.363898, 0.618501, 0.782349]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.363898, 0.618501, 0.782349], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.75, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0.5, 0.],
                     FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0.75, 0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.75, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.75, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5, ",", #6, ",", #7, 
               ",", #8}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.7347062874197783`*^9, 3.734706318709034*^9, 3.7347063502955484`*^9, 
   3.734706393331214*^9, 3.734706423805643*^9, 3.7347065012483625`*^9, 
   3.7347065701743007`*^9, {3.734706681852799*^9, 3.7347066987135673`*^9}, 
   3.7347067368008285`*^9, 3.7347067728469915`*^9, 3.7347068597686768`*^9, 
   3.734706895646742*^9, 3.7347069386138525`*^9, 3.734706976121787*^9, 
   3.734720901343441*^9, 3.7347218750284834`*^9, 3.734754480264496*^9, 
   3.7347546823658676`*^9, 3.734769686265168*^9, 3.734769737736503*^9, 
   3.7356504458243465`*^9, 3.73980556422711*^9, 3.7398065467207413`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"setVariables", "[", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "Eff", ",", " ", "EeSpin", ",", " ", "EnSpin", ",", " ", "undrivenStates",
      ",", " ", "undrivenEnergies", ",", " ", "\[Psi]0", ",", " ", "funcs", 
     ",", " ", "equations", ",", " ", "state", ",", " ", "\[Alpha]", ",", " ",
      "\[Beta]"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[CapitalDelta]E", " ", "=", " ", "50.09011359258564"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"B0", " ", "=", " ", "0.16424778120598266"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Bac", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Eac", " ", "=", " ", "0"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Eff", " ", "=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"energiesInOrder", "[", 
       RowBox[{"0", ",", " ", "H"}], "]"}], "[", 
      RowBox[{"[", "3", "]"}], "]"}], " ", "-", " ", 
     RowBox[{
      RowBox[{"energiesInOrder", "[", 
       RowBox[{"0", ",", " ", "H"}], "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EeSpin", " ", "=", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"energiesInOrder", "[", 
       RowBox[{"0", ",", " ", "H"}], "]"}], "[", 
      RowBox[{"[", "3", "]"}], "]"}], " ", "-", " ", 
     RowBox[{
      RowBox[{"energiesInOrder", "[", 
       RowBox[{"0", ",", " ", "H"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"undrivenEnergies", " ", "=", " ", 
  RowBox[{"energiesInOrder", "[", 
   RowBox[{"0", ",", " ", "H"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"drivenEnergies", " ", "=", " ", 
   RowBox[{"energiesInOrder", "[", 
    RowBox[{"0", ",", " ", "HnsInGE"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Bac", " ", "=", " ", "0.00025523343867387636"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Eac", " ", "=", " ", "59.04708726440646"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Nu]B", " ", "=", " ", 
   RowBox[{"(", 
    RowBox[{"EeSpin", " ", "-", " ", "9.955468751323821`*^6"}], ")"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Nu]E", " ", "=", " ", 
    RowBox[{"(", 
     RowBox[{"Eff", " ", "-", " ", "9.955468751323821`*^6"}], ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"gSO", " ", "=", " ", 
  FractionBox[
   RowBox[{"A", "*", "Vt"}], 
   RowBox[{"4", "*", "\[Epsilon]0"}]]}], "\[IndentingNewLine]", 
 RowBox[{"gB", " ", "=", " ", 
  RowBox[{"\[Gamma]e", "*", "Bac"}]}], "\[IndentingNewLine]", 
 RowBox[{"gE", " ", "=", " ", 
  FractionBox[
   RowBox[{"e", "*", "Eac", "*", "d", "*", "Vt"}], 
   RowBox[{"4", "*", "h", "*", "\[Epsilon]0"}]]}], "\[IndentingNewLine]", 
 RowBox[{"\[Delta]SO", " ", "=", " ", 
  RowBox[{"\[Epsilon]0", " ", "-", " ", "Eff"}]}], "\[IndentingNewLine]", 
 RowBox[{"\[Delta]1", " ", "=", " ", 
  RowBox[{
   RowBox[{"drivenEnergies", "[", 
    RowBox[{"[", "3", "]"}], "]"}], " ", "-", " ", 
   RowBox[{"drivenEnergies", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Delta]2", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"drivenEnergies", "[", 
        RowBox[{"[", "6", "]"}], "]"}], " ", "-", " ", 
       RowBox[{"drivenEnergies", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";;", "\[IndentingNewLine]", 
      "\[Delta]3"}], " ", "=", " ", 
     RowBox[{
      RowBox[{"drivenEnergies", "[", 
       RowBox[{"[", "4", "]"}], "]"}], " ", "-", " ", 
      RowBox[{"drivenEnergies", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Phi]", " ", "=", " ", 
   FractionBox[
    RowBox[{"(", 
     RowBox[{"\[Delta]SO", " ", "+", " ", 
      RowBox[{"Sqrt", "[", 
       RowBox[{
        SuperscriptBox["\[Delta]SO", "2"], " ", "+", " ", 
        RowBox[{"4", "*", 
         SuperscriptBox["gSO", "2"]}]}], "]"}]}], ")"}], 
    RowBox[{"2", "*", "gSO"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Theta]", " ", "=", " ", 
    FractionBox[
     RowBox[{"(", 
      RowBox[{"\[Delta]SO", " ", "-", " ", 
       RowBox[{"Sqrt", "[", 
        RowBox[{
         SuperscriptBox["\[Delta]SO", "2"], " ", "+", " ", 
         RowBox[{"4", "*", 
          SuperscriptBox["gSO", "2"]}]}], "]"}]}], ")"}], 
     RowBox[{"2", "*", "gSO"}]]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Alpha]", " ", "=", " ", 
   FractionBox["\[Theta]", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      SuperscriptBox["\[Theta]", "2"], " ", "+", " ", "1"}], "]"}]]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Beta]", " ", "=", " ", 
    FractionBox["\[Phi]", 
     RowBox[{"Sqrt", "[", 
      RowBox[{
       SuperscriptBox["\[Phi]", "2"], " ", "+", " ", "1"}], "]"}]]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Phi]3", " ", "=", " ", 
   FractionBox[
    RowBox[{"(", 
     RowBox[{"\[Delta]3", " ", "+", " ", 
      RowBox[{"Sqrt", "[", 
       RowBox[{
        SuperscriptBox["\[Delta]3", "2"], " ", "+", " ", 
        RowBox[{"4", "*", 
         SuperscriptBox["gB", "2"]}]}], "]"}]}], ")"}], 
    RowBox[{"2", "*", "gB"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Theta]1", " ", "=", " ", 
   FractionBox[
    RowBox[{"(", 
     RowBox[{"\[Delta]1", " ", "-", " ", 
      RowBox[{"Sqrt", "[", 
       RowBox[{
        SuperscriptBox["\[Delta]1", "2"], " ", "+", " ", 
        RowBox[{"4", "*", 
         SuperscriptBox["\[Beta]", "2"], "*", 
         SuperscriptBox["gB", "2"]}]}], "]"}]}], ")"}], 
    RowBox[{"2", "*", "\[Beta]", "*", "gB"}]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Theta]2", " ", "=", " ", 
    FractionBox[
     RowBox[{"(", 
      RowBox[{"\[Delta]2", " ", "-", " ", 
       RowBox[{"Sqrt", "[", 
        RowBox[{
         SuperscriptBox["\[Delta]2", "2"], " ", "+", " ", 
         RowBox[{"4", "*", 
          SuperscriptBox["\[Alpha]", "2"], "*", 
          SuperscriptBox["gB", "2"]}]}], "]"}]}], ")"}], 
     RowBox[{"2", "*", "\[Alpha]", "*", "gB"}]]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Alpha]1", " ", "=", " ", 
   FractionBox["\[Theta]1", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      SuperscriptBox["\[Theta]1", "2"], " ", "+", " ", "1"}], "]"}]]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Alpha]2", " ", "=", " ", 
   FractionBox["\[Theta]2", 
    RowBox[{"Sqrt", "[", 
     RowBox[{
      SuperscriptBox["\[Theta]2", "2"], " ", "+", " ", "1"}], "]"}]]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Beta]3", " ", "=", " ", 
    FractionBox["\[Phi]3", 
     RowBox[{"Sqrt", "[", 
      RowBox[{
       SuperscriptBox["\[Phi]3", "2"], " ", "+", " ", "1"}], "]"}]]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"gEns", " ", "=", " ", 
    RowBox[{"gE", "*", "\[Beta]3", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[Alpha]1", "*", "\[Alpha]"}], " ", "+", " ", 
       RowBox[{"\[Alpha]2", "*", "\[Beta]"}]}], ")"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"LogPlot", "[", 
  RowBox[{
   RowBox[{"Max", "[", 
    RowBox[{
     SuperscriptBox["10", 
      RowBox[{"-", "8"}]], ",", " ", 
     SuperscriptBox[
      RowBox[{"Sin", "[", 
       RowBox[{"gEns", "*", "t"}], "]"}], "2"]}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", " ", "Tmax"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7347084299435325`*^9, 3.73470845266186*^9}, {
  3.7347084898188972`*^9, 3.734708583322621*^9}, {3.734708619197997*^9, 
  3.7347087363763824`*^9}, {3.7347087935817184`*^9, 3.7347087946912975`*^9}, {
  3.734708921145115*^9, 3.7347091257769785`*^9}, {3.7347093631132183`*^9, 
  3.734709568634163*^9}, {3.734709684909025*^9, 3.734709738484376*^9}, {
  3.734720730580316*^9, 3.7347207589997597`*^9}, {3.7347211492924476`*^9, 
  3.734721153654022*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "5.0912646573248005`*^9"}], ",", 
   RowBox[{"-", "5.124549296137826`*^9"}], ",", 
   RowBox[{"-", "5.32816915282959`*^8"}], ",", 
   RowBox[{"-", "5.0480269800032616`*^8"}], ",", "5.3392821670397645`*^8", 
   ",", "5.034226619108238`*^8", ",", "5.095443549509977`*^9", ",", 
   "5.120639138621152`*^9"}], "}"}]], "Output",
 CellChangeTimes->{
  3.734708737063711*^9, {3.734708771762107*^9, 3.734708795866006*^9}, 
   3.7347096696121492`*^9, 3.7347097495066576`*^9, 3.7347209450063543`*^9, 
   3.7356504542493153`*^9, 3.739805566652715*^9, 3.73980654779245*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.9632254228085518`*^7", ",", 
   RowBox[{"-", "5.626882898663752`*^9"}], ",", 
   RowBox[{"-", "4.74813667209301`*^7"}], ",", 
   RowBox[{"-", "5.625697735042094`*^9"}], ",", "5.654947735042096`*^9", ",", 
   "1.82542850711174`*^7", ",", "5.597609980313588`*^9", ",", 
   RowBox[{"-", "382254.22808387177`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.734708737063711*^9, {3.734708771762107*^9, 3.734708795866006*^9}, 
   3.7347096696121492`*^9, 3.7347097495066576`*^9, 3.7347209450063543`*^9, 
   3.7356504542493153`*^9, 3.739805566652715*^9, 3.7398065479844017`*^9}],

Cell[BoxData["2.9234746252602234`*^7"], "Output",
 CellChangeTimes->{
  3.734708737063711*^9, {3.734708771762107*^9, 3.734708795866006*^9}, 
   3.7347096696121492`*^9, 3.7347097495066576`*^9, 3.7347209450063543`*^9, 
   3.7356504542493153`*^9, 3.739805566652715*^9, 3.739806548192349*^9}],

Cell[BoxData["7.138879279708322`*^6"], "Output",
 CellChangeTimes->{
  3.734708737063711*^9, {3.734708771762107*^9, 3.734708795866006*^9}, 
   3.7347096696121492`*^9, 3.7347097495066576`*^9, 3.7347209450063543`*^9, 
   3.7356504542493153`*^9, 3.739805566652715*^9, 3.739806548400296*^9}],

Cell[BoxData[
 RowBox[{"-", "5.3512787343199015`*^7"}]], "Output",
 CellChangeTimes->{
  3.734708737063711*^9, {3.734708771762107*^9, 3.734708795866006*^9}, 
   3.7347096696121492`*^9, 3.7347097495066576`*^9, 3.7347209450063543`*^9, 
   3.7356504542493153`*^9, 3.739805566652715*^9, 3.7398065486002464`*^9}],

Cell[BoxData["1.0344516495729446`*^9"], "Output",
 CellChangeTimes->{
  3.734708737063711*^9, {3.734708771762107*^9, 3.734708795866006*^9}, 
   3.7347096696121492`*^9, 3.7347097495066576`*^9, 3.7347209450063543`*^9, 
   3.7356504542493153`*^9, 3.739805566652715*^9, 3.739806548816191*^9}],

Cell[BoxData[
 RowBox[{"-", "7.711362094901562`*^7"}]], "Output",
 CellChangeTimes->{
  3.734708737063711*^9, {3.734708771762107*^9, 3.734708795866006*^9}, 
   3.7347096696121492`*^9, 3.7347097495066576`*^9, 3.7347209450063543`*^9, 
   3.7356504542493153`*^9, 3.739805566652715*^9, 3.7398065490241375`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Set", "::", "write"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Tag \[NoBreak]\\!\\(\\*RowBox[{\\\"Span\\\"}]\\)\[NoBreak] \
in \[NoBreak]\\!\\(\\*RowBox[{RowBox[{\\\"-\\\", \\\"1.1377969156968117`*^7\\\
\"}], \\\";;\\\", \\\"\[Delta]3\\\"}]\\)\[NoBreak] is Protected. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/write\\\", \
ButtonNote -> \\\"Set::write\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.7347209475530987`*^9, 3.735650456414849*^9, 
  3.7398055676591387`*^9, 3.7398065492280865`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 
    DirectedInfinity[1]},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Part[#, 1], 
      Exp[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Part[#, 1], 
      Exp[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->NCache[{{0, 
      Rational[1, 10000000]}, {
      DirectedInfinity[1], 
      DirectedInfinity[-1]}}, {{0, 1.*^-7}, {
      DirectedInfinity[1], 
      DirectedInfinity[-1]}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{Automatic, 
     Charting`ScaledTicks[{Log, Exp}]}, {Automatic, {{-0.6931471805599453, 
       FormBox[
        TagBox[
         InterpretationBox["\"0.5\"", 0.5, AutoDelete -> True], NumberForm[#, {
           DirectedInfinity[1], 1.}]& ], TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0., 
       FormBox["1", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {0.6931471805599453, 
       FormBox["2", TraditionalForm], {0.01, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.6094379124341003`, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-1.2039728043259361`, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.916290731874155, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.5108256237659907, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.35667494393873245`, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.2231435513142097, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {-0.10536051565782628`, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {0.4054651081081644, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.0986122886681098`, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.3862943611198906`, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.6094379124341003`, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.7047480922384253`, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.791759469228055, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}, {1.8718021769015913`, 
       FormBox[
        InterpretationBox[
         StyleBox[
          
          GraphicsBox[{}, ImageSize -> {0., 0.}, BaselinePosition -> 
           Baseline], "CacheGraphics" -> False], 
         Spacer[{0., 0.}]], TraditionalForm], {0.005, 0.}, {
        AbsoluteThickness[0.1]}}}}]]], "Output",
 CellChangeTimes->{
  3.734708737063711*^9, {3.734708771762107*^9, 3.734708795866006*^9}, 
   3.7347096696121492`*^9, 3.7347097495066576`*^9, 3.7347209450063543`*^9, 
   3.7356504542493153`*^9, 3.739805566652715*^9, 3.739806549568*^9}]
}, Open  ]]
},
WindowSize->{1366, 685},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"10.4 for Microsoft Windows (64-bit) (April 11, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 19282, 501, 2199, "Input"],
Cell[19843, 523, 8114, 236, 624, "Input"],
Cell[27960, 761, 244, 6, 54, "Input"],
Cell[CellGroupData[{
Cell[28229, 771, 13745, 334, 1527, "Input"],
Cell[41977, 1107, 654, 9, 31, "Output"],
Cell[42634, 1118, 634, 9, 31, "Output"],
Cell[43271, 1129, 859, 14, 34, "Output"],
Cell[44133, 1145, 114251, 2024, 227, "Output"],
Cell[158387, 3171, 149411, 2605, 225, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[307835, 5781, 8437, 233, 1246, "Input"],
Cell[316275, 6016, 617, 12, 34, "Output"],
Cell[316895, 6030, 611, 11, 34, "Output"],
Cell[317509, 6043, 288, 4, 31, "Output"],
Cell[317800, 6049, 287, 4, 31, "Output"],
Cell[318090, 6055, 307, 5, 31, "Output"],
Cell[318400, 6062, 288, 4, 31, "Output"],
Cell[318691, 6068, 306, 5, 31, "Output"],
Cell[319000, 6075, 654, 12, 24, "Message"],
Cell[319657, 6089, 6322, 165, 236, "Output"]
}, Open  ]]
}
]
*)

